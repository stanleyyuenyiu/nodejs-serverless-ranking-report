{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Lambda and API Gateway",
  "Parameters": {
    "S3Bucket": {
      "Description": "The name of the S3 bucket that contains the source code of your Lambda function.",
      "Type": "String"
    }
  },
  "Resources": {
    "WebsitesDB": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "ProvisionedThroughput":{
          "ReadCapacityUnits" : 5,
          "WriteCapacityUnits" : 5
        },
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "TableName" : "rankings"
      }
    },
   
    "LambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [
        {
          "PolicyName": "logs",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                 "logs:*"
              ],
              "Resource": "arn:aws:logs:*:*:*"
            }]
          }
        },
        {
          "PolicyName": "dbRead",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Action": [
                        "application-autoscaling:DescribeScalableTargets",
                        "application-autoscaling:DescribeScalingActivities",
                        "application-autoscaling:DescribeScalingPolicies",
                        "cloudwatch:DescribeAlarmHistory",
                        "cloudwatch:DescribeAlarms",
                        "cloudwatch:DescribeAlarmsForMetric",
                        "cloudwatch:GetMetricStatistics",
                        "cloudwatch:ListMetrics",
                        "datapipeline:DescribeObjects",
                        "datapipeline:DescribePipelines",
                        "datapipeline:GetPipelineDefinition",
                        "datapipeline:ListPipelines",
                        "datapipeline:QueryObjects",
                        "dynamodb:BatchGetItem",
                        "dynamodb:DescribeTable",
                        "dynamodb:GetItem",
                        "dynamodb:ListTables",
                        "dynamodb:Query",
                        "dynamodb:Scan",
                        "dynamodb:DescribeReservedCapacity",
                        "dynamodb:DescribeReservedCapacityOfferings",
                        "dynamodb:ListTagsOfResource",
                        "dynamodb:DescribeTimeToLive",
                        "dynamodb:DescribeLimits",
                        "dynamodb:ListGlobalTables",
                        "dynamodb:DescribeGlobalTable",
                        "dynamodb:DescribeBackup",
                        "dynamodb:ListBackups",
                        "dynamodb:DescribeContinuousBackups",
                        "dax:Describe*",
                        "dax:List*",
                        "dax:GetItem",
                        "dax:BatchGetItem",
                        "dax:Query",
                        "dax:Scan",
                        "ec2:DescribeVpcs",
                        "ec2:DescribeSubnets",
                        "ec2:DescribeSecurityGroups",
                        "iam:GetRole",
                        "iam:ListRoles",
                        "sns:ListSubscriptionsByTopic",
                        "sns:ListTopics",
                        "lambda:ListFunctions",
                        "lambda:ListEventSourceMappings",
                        "lambda:GetFunctionConfiguration"
                    ],
                    "Effect": "Allow",
                    "Resource": "*"
                }
            ]
          }
        },
        {
          "PolicyName": "lambdaInvoke",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                      "lambda:InvokeFunction",
                      "lambda:InvokeAsync"
                  ],
                  "Resource": [
                      "*"
                  ]
              }
            ]
          }
        }
        ]
      }
    },
    
    "GetDataLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "S3Bucket"},
          "S3Key": "GetData.zip"
        },
        "Description": "GetData",
        "Handler": "index.handler",
        "MemorySize": 256,
        "Role": {"Fn::GetAtt": ["LambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "TABLE_NAME": { "Ref": "WebsitesDB" },
            "INVOKE_FUNCTION": {"Ref": "FilterDataLambda" }
          }
        }
      }
    },
   
    "FilterDataLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {"Ref": "S3Bucket"},
          "S3Key": "FilterData.zip"
        },
        "Description": "FilterData",
        "Handler": "index.handler",
        "MemorySize": 256,
        "Role": {"Fn::GetAtt": ["LambdaRole", "Arn"]},
        "Runtime": "nodejs8.10",
        "Timeout": 30,
        "Environment": {
            "Variables": {
              "URL": "http://private-1de182-mamtrialrankingadjustments4.apiary-mock.com/exclusions"
            }
        }
      }
    },

    "GetDataLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["GetDataLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "RestApi"}, "/*"]]}
      }
    },

    "RestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "RestAPI"
      }
    },

    "GetDataResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "RestApi"},
        "ParentId": {"Fn::GetAtt": ["RestApi", "RootResourceId"]},
        "PathPart": "data"
      }
    },  

    "DataGetMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {"Ref": "RestApi"},
        "ResourceId": {"Ref": "GetDataResource"},
        "HttpMethod": "GET",
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "Type": "AWS_PROXY",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join" : ["", ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["GetDataLambda", "Arn"]}, "/invocations"]]}
        },
        "MethodResponses": [{
          "ResponseParameters": {
            "method.response.header.Access-Control-Allow-Headers": false,
            "method.response.header.Access-Control-Allow-Methods": false,
            "method.response.header.Access-Control-Allow-Origin": false
          },
          "StatusCode": 200
        }]
      }
    },

    "DataOptionMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": {"Ref": "RestApi"},
        "ResourceId": {"Ref": "GetDataResource"},
        "HttpMethod": "OPTIONS",
        "AuthorizationType": "NONE",
        "Integration": {
          "Type": "MOCK",
          "IntegrationHttpMethod": "POST",
          "IntegrationResponses": [{
            "ResponseTemplates": {
              "application/json": ""
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
              "method.response.header.Access-Control-Allow-Methods": "'GET,POST,OPTIONS'",
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            },
            "StatusCode": 200
          }],
          "PassthroughBehavior": "WHEN_NO_MATCH",
          "RequestTemplates": { 
            "application/json": "{\"statusCode\": 200}" 
          }
        },
        "MethodResponses": [{
          "ResponseModels" :{ "application/json": "Empty"},
          "ResponseParameters": {
            "method.response.header.Access-Control-Allow-Headers": false,
            "method.response.header.Access-Control-Allow-Methods": false,
            "method.response.header.Access-Control-Allow-Origin": false
          },
          "StatusCode": 200
        }]
      }
    },

    "RestApiDeployment": {
        "Type": "AWS::ApiGateway::Deployment",
        "Properties": {
          "RestApiId": {"Ref": "RestApi"},
          "StageName": "v1"
        },
        "DependsOn": ["DataGetMethod"]
    }

  },
  "Outputs": {
      "ApiId": {
        "Value": {"Ref": "RestApi"}
      },
      "ApiBaseUrl": {
        "Value": {"Fn::Join": ["", ["https://", {"Ref": "RestApi"}, ".execute-api.", {"Ref": "AWS::Region"} , ".amazonaws.com/v1"]]}
      },
      "Region": {
        "Value": {"Ref": "AWS::Region"}
      }
  }
}